c-----------------------------------------------------------------------
c   
c   2D Lid driven cavity
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      utrans = 0.0
      udiff = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      implicit none
      include 'SIZE'
      include 'TOTAL'

      logical ifset
      save    ifset
      data    ifset /.false./

      ! Nek's communication common block
      common /nekmpi/ nid_,np_,nekcomm
      integer         nid_,np_,nekcomm

      ! Nek's global numbering (all positive)
      common /c_is1/ glo_num(1*lx1*ly1*lz1*lelv)
      integer*8 glo_num

      ! Unique global numbering (only owner is positive)
      common /i8unique/ uid 
      integer*8 uid(lx1*ly1*lz1*lelv)

      ! Unique GS handle
      common /iunique/ gshu
      integer gshu

      ! Unique mask
      common /runique/ umask
      real umask(lx1*ly1*lz1*lelv)
      
      ! Other
      integer i,ntot

      ntot = nx1*ny1*nz1*nelv

      if (.not.ifset) then
         call setup_topo        ! Necessary??
         call i8copy(uid,glo_num,ntot)         
         call fgslib_gs_unique(uid,ntot,nekcomm,np)
         call fgslib_gs_setup(gshu,uid,ntot,nekcomm,np)
         call set_umask(umask,uid,ntot)
         ifset = .false.
      endif

      call outpost(vx,umask,vz,pr,t,'foo')
      
      call col2(vx,umask,ntot)

      call outpost(vx,umask,vz,pr,t,'foo')
      
      call fgslib_gs_op(gshu,vx,1,1,0) ! 1->double, 1->sum, 0->scatter

      call outpost(vx,umask,vz,pr,t,'foo')
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process

C     Set boundary conditions

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Smoothing function for the velocity along the lid in order to avoid a
c     gap in the x-velocity at the corners:

c     ux = 0 if x <= delta0 or x >= 1-delta0
c     ux is smoothed if delta0 < x < delsmo or 1-delsmo < x < 1-delta0
c     ux=1 if delsmo <= x <= 1-delsmo

      real delta0
      real delsmo
      
      delta0 = 0.001 
      delsmo = 0.1

      if (x.le.delta0) then
         ux= 0.0
      elseif(x.lt.delsmo) then
         arg = x/delsmo
         ux=1./(1.+exp(1./(arg-1.)+1./arg))
      elseif (x.le.1.0-delsmo) then
         ux=1.0
      elseif (x.lt.(1-delta0)) then
         arg = (1.0-x)/delsmo
         ux= 1./(1.+exp(1./(arg-1.)+1./arg))
      else
         ux=0.0
      endif
      uy = 0.0
      uz = 0.0

      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

C     Set initial conditions

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0

      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'INPUT'
      param(99)=3

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
c     param(66) = 4
c     param(67) = 4
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine set_umask(umask,uid,ntot)
      implicit none
      include 'SIZE'

      real umask(lx1*ly1*lz1*lelv)
      integer*8 uid(lx1*ly1*lz1*lelv)

      integer i,ntot

      call rone(umask,ntot)
      do i=1,ntot
         if (uid(i).lt.0) umask(i) = 0.0
      enddo
      
      return
      end
